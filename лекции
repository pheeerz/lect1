ЛЕКЦИЯ 1
Тема 1:
Парадигмы программирования. Методические и технические приемы, обеспечивающие качественную модульную структуру.

Структура темы:
1. Неправильное использование конструкций ЯП.
2. Основные конструкции ООП. 
3. Правильное использование ООП. SOLID 
4. Соглашения о кодировании.

Этот предмет нужен для того чтобы:
1) Понимать что значит хороший код. 
2) Уметь писать хороший код. 
3) Уметь писать хороший объектно-ориентированный код. 
4) Уметь тестировать код. 
5) Иметь представления о процессе объектно-ориентированного проектирования. 
6) Уметь правильно пользоваться git.

1. ООП тенденции 
a. Повышение уровня абстракции 
b. Выделение типичных конструкций
c. Улучшение безопасности и расширяемости
2. Ценности:  инкапсуляция и абстракция
3. Механизмы
a. Пространства имен
b. Наследование – механизм создания новых классов, на основе существующих. Наследник может использовать не только Public - интерфейс, но и protected. Виды наследования по спецификатору доступа: Public, Protected
c. Полиморфизм - способность программы выбирать различные реализации, при вызове операций с одним и тем же названием
Полиморфизм = наследование + виртуальные функции

Вывод 1:
Функция - еденица абстракции. 
Классы создают пространство имён. 
Solid - это классно. 
Каждый класс должен делать что-то одно. 
Классы должны зависеть от абстракций, а не от конкретных реализаций.

ЛЕКЦИЯ 2

Тема 4: Инструментальные средства. Системы контроля версий
1 Системы контроля версий. Мотивация (проблемы)
* Несколько версий одного и того же кода
* Несколько программистов правят один и тот же код одновременно
* Хотим управлять изменениями (соединять работу нескольких программистов или разных версий кода)
* Хотим структурировать код по времени (отслеживать изменения), желательно в графическом виде
2 Системы контроля версий. История
Все это можно сделать вручную — версии хранить в разных каталогах, код друг другу пересылать в архивах, резервные копии на сервере, а при нарушении стандарта кодирования лишать премии
3 Системы контроля версий. Распределенные и централизованные
Распределенные системы позволяют лучше масштабировать процесс разработки.

Вывод 2:
Функции должны иметь говорящие имена. 
Длина функции - не боле 25 строк и 120 символов. 
Хороший код понятен и без комментариев. 
В стеке хранятся адреса функций, после использования функции, мы возвращаемся обратно. 
